export const skillTechnicDetails = {
  html: [
    "시멘틱 태그를 활용한 구조적인 마크업을 할 수 있습니다.",
    "웹 접근성과 SEO를 고려한 마크업을 작성할 수 있습니다.",
  ],
  css: [
    "Flexbox와 Grid를 활용한 레이아웃을 구현할 수 있습니다.",
    "미디어 쿼리를 사용해 반응형 UI를 만들 수 있습니다.",
  ],
  javascript: [
    "ES6+ 문법을 활용하여 가독성 높은 코드를 작성할 수 있습니다.",
    "클로저가 리액트 개발에 어떠한 영향을 주었는지 설명할 수 있습니다.",
    "Promise와 async/await를 이용한 비동기 로직을 처리할 수 있습니다.",
  ],
  typescript: [
    "타입 정의를 통해 코드의 안정성과 가독성을 높일 수 있습니다.",
    "interface와 type을 상황에 맞게 구분하여 사용할 수 있습니다.",
  ],
  react: [
    "컴포넌트 기반 아키텍처로 UI를 구조화하고, 관심사를 분리할 수 있습니다.",
    "커스텀 훅을 만들어 로직을 재사용하고 코드의 응집도를 높일 수 있습니다.",
    "useMemo와 useCallback을 적절히 사용해 렌더링 성능을 최적화할 수 있습니다.",
  ],
  next: [
    "SSR, SSG 등 렌더링 방식을 상황에 따라 적절히 선택할 수 있습니다.",
    "서버 컴포넌트와 클라이언트 컴포넌트를 적절히 분리하여 렌더링 비용을 최적화할 수 있습니다.",
    "API Route를 활용하여, 백엔드와 연계된 서버리스 함수를 구현할 수 있습니다.",
  ],
  tailwind: [
    "유틸리티 클래스를 기반으로 빠르게 일관된 UI를 설계할 수 있습니다.",
    "반응형 디자인을 모바일 퍼스트 접근 방식으로 쉽게 구현할 수 있습니다.",
  ],
  zustand: [
    "store를 로직 단위로 분리하여 유지보수성과 확장성을 고려한 설계를 할 수 있습니다.",
    "persist, devtools 등의 middleware를 적용하여 상태 유지 및 디버깅 경험을 개선할 수 있습니다.",
  ],
  jotai: ["비동기 atom을 통해 서버 상태를 간결하게 처리할 수 있습니다."],
  tanstackQuery: [
    "CSR 환경에서 서버 상태를 효율적으로 관리하기 위해 TanStack Query를 사용한 경험이 있습니다.",
    "데이터 요청 시 자동 캐싱 및 배경 갱신 기능을 활용해 사용자 경험을 개선할 수 있습니다.",
  ],
  githubActions: [
    "CI/CD 파이프라인을 구성하여 빌드 자동화, ESLint 테스트 등 코드 퀄리티를 유지할 수 있습니다.",
    "팀원들과의 협업 과정에서 일관된 작업 환경을 유지할 수 있습니다.",
  ],
};
